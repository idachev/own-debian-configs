###########################################################
# Options for Bash

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

#echo -e "\n\nExecuting ~/.bashrc\n\n"

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

#echo 'Prompt exist continue ~/.bashrc'

# Set the default editor to vim.
export EDITOR=vim

# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

#disable xon/xoff to use ctrl-s for reverse history
stty -ixon

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

##################################################################
# History options

HISTSIZE=9999999
HISTFILESIZE=9999999

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm|xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

. ~/.bash_git

GIT_PS1_SHOWDIRTYSTATE=true

###
# When using screen add its sessionname
if [[ "$STY" != "" ]]; then
	PR_STY=" $STY"
else
	PR_STY=''
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[00;33m\]\t \D{%Y-%m-%d} \[\033[00;32m\]\u@\h:\l${PR_STY}\[\033[00m\]\n\[\033[01;34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\n\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\t \D{%Y-%m-%d} \u@\h:\l${PR_STY}\n\w$(__git_ps1)\n$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h:\w\a\]$PS1"
    ;;
*)
    ;;
esac

##################################################################
# Misc

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

if [ -f ~/.aliases ]; then
  . ~/.aliases
fi

if [ -f ~/.shell_set_colors ]; then
  . ~/.shell_set_colors
fi

if [ -f ~/.localrc ]; then
  . ~/.localrc
fi

##################################################################
# Keychain

keychain -q ~/.local_ssh_key

if [ -f "~/.keychain/${HOSTNAME}-sh" ]; then
  . "~/.keychain/${HOSTNAME}-sh"
fi

if [ -f "~/.keychain/${HOSTNAME}-sh-gpg" ]; then
  . "~/.keychain/${HOSTNAME}-sh-gpg"
fi

##################################################################
# Others

# jump zsh completion
#source `jump-bin --bash-integration`

# kubectl

if which kubectl > /dev/null 2>&1; then
  source <(kubectl completion bash)
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="${HOME}/.sdkman"
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
. "$HOME/.cargo/env"
